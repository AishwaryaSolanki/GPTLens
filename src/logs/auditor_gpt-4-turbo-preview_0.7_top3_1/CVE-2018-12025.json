[
    {
        "function_name": "transfer",
        "code": "function transfer(address to, uint value) returns (bool success) { if (frozenAccount[msg.sender]) return false; if(balances[msg.sender] < value) return false; if(balances[to] + value < balances[to]) return false; balances[msg.sender] -= value; balances[to] += value; Transfer(msg.sender, to, value); return true; }",
        "vulnerability": "Arithmetic Overflow/Underflow",
        "reason": "The function does not safely check for arithmetic overflows or underflows when adding to the balance of the recipient. Solidity version ^0.4.2 does not automatically revert on overflow/underflow. This can be exploited by causing an overflow in the recipient's balance, potentially making it possible to wrap the balance to a lower amount.",
        "file_name": "2018-12025.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for FuturXE (FXE), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized transfer of digital assets because of a logic error. The developer messed up with the boolean judgment - if the input value is smaller than or equal to allowed value, the transfer session would stop execution by returning false. This makes no sense, because the transferFrom() function should require the transferring value to not exceed the allowed value in the first place. Suppose this function asks for the allowed value to be smaller than the input. Then, the attacker could easily ignore the allowance: after this condition, the `allowed[from][msg.sender] -= value;` would cause an underflow because the allowed part is smaller than the value. The attacker could transfer any amount of FuturXe tokens of any accounts to an appointed account (the `_to` address) because the allowed value is initialized to 0, and the attacker could bypass this restriction even without the victim's private key."
    },
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address from, address to, uint value) returns (bool success) { if (frozenAccount[msg.sender]) return false; if(balances[from] < value) return false; if( allowed[from][msg.sender] >= value ) return false; if(balances[to] + value < balances[to]) return false; balances[from] -= value; allowed[from][msg.sender] -= value; balances[to] += value; Transfer(from, to, value); return true; }",
        "vulnerability": "Incorrect Comparison",
        "reason": "The condition `if( allowed[from][msg.sender] >= value ) return false;` mistakenly returns false when the `allowed` amount is greater than or equal to `value`, which is the opposite of the intended logic. It should only return false if `allowed[from][msg.sender] < value`, preventing transfers that are not approved or exceeding the approved amount.",
        "file_name": "2018-12025.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for FuturXE (FXE), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized transfer of digital assets because of a logic error. The developer messed up with the boolean judgment - if the input value is smaller than or equal to allowed value, the transfer session would stop execution by returning false. This makes no sense, because the transferFrom() function should require the transferring value to not exceed the allowed value in the first place. Suppose this function asks for the allowed value to be smaller than the input. Then, the attacker could easily ignore the allowance: after this condition, the `allowed[from][msg.sender] -= value;` would cause an underflow because the allowed part is smaller than the value. The attacker could transfer any amount of FuturXe tokens of any accounts to an appointed account (the `_to` address) because the allowed value is initialized to 0, and the attacker could bypass this restriction even without the victim's private key."
    },
    {
        "function_name": "mintToken",
        "code": "function mintToken(address target, uint256 mintedAmount) onlyOwner{ balances[target] += mintedAmount; totalSupply += mintedAmount; Transfer(0,owner,mintedAmount); Transfer(owner,target,mintedAmount); }",
        "vulnerability": "Unchecked Minting",
        "reason": "The function allows the contract owner to mint an arbitrary amount of tokens to any account, which can lead to inflation and depreciation of the token value. There's no check on the minting amount, nor is there a maximum supply limit, allowing the owner to potentially disrupt the token economy.",
        "file_name": "2018-12025.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for FuturXE (FXE), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized transfer of digital assets because of a logic error. The developer messed up with the boolean judgment - if the input value is smaller than or equal to allowed value, the transfer session would stop execution by returning false. This makes no sense, because the transferFrom() function should require the transferring value to not exceed the allowed value in the first place. Suppose this function asks for the allowed value to be smaller than the input. Then, the attacker could easily ignore the allowance: after this condition, the `allowed[from][msg.sender] -= value;` would cause an underflow because the allowed part is smaller than the value. The attacker could transfer any amount of FuturXe tokens of any accounts to an appointed account (the `_to` address) because the allowed value is initialized to 0, and the attacker could bypass this restriction even without the victim's private key."
    }
]