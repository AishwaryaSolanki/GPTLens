[
    {
        "function_name": "mintTokens",
        "code": "function mintTokens(uint256 _mintedAmount) public onlyOwner { balanceOf[owner] = balanceOf[owner].add(_mintedAmount); totalSupply = totalSupply.add(_mintedAmount); Transfer(0, owner, _mintedAmount); }",
        "vulnerability": "Unlimited Minting",
        "reason": "The mintTokens function allows the contract owner to mint an unlimited amount of tokens to their balance, potentially diluting the value of the token and impacting all token holders negatively.",
        "file_name": "2019-15080.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for MORPH Token through 2019-06-05, an Ethereum token. A typo in the constructor of the Owned contract (which is inherited by MORPH Token) allows attackers to acquire contract ownership. A new owner can subsequently obtain MORPH Tokens for free and can perform a DoS attack."
    },
    {
        "function_name": "blacklistAccount",
        "code": "function blacklistAccount(address _target, bool _isBlacklisted) public onlyOwner { isblacklistedAccount[_target] = _isBlacklisted; }",
        "vulnerability": "Centralized Control Over Funds",
        "reason": "The ability to blacklist accounts at the owner's discretion introduces a level of centralization and control over user's funds. This could be misused to freeze assets without consent, impacting the decentralized nature of the blockchain.",
        "file_name": "2019-15080.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for MORPH Token through 2019-06-05, an Ethereum token. A typo in the constructor of the Owned contract (which is inherited by MORPH Token) allows attackers to acquire contract ownership. A new owner can subsequently obtain MORPH Tokens for free and can perform a DoS attack."
    },
    {
        "function_name": "burn",
        "code": "function burn(uint256 _value) public onlyOwner { require(_value <= balanceOf[msg.sender]); address burner = msg.sender; balanceOf[burner] = balanceOf[burner].sub(_value); totalSupply = totalSupply.sub(_value); Burn(burner, _value); }",
        "vulnerability": "Owner-Only Token Burning",
        "reason": "The burn function restricts the ability to burn tokens to the contract owner only, limiting the functionality for token holders who may wish to reduce the supply of their own volition, and placing too much control in the hands of the contract owner.",
        "file_name": "2019-15080.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for MORPH Token through 2019-06-05, an Ethereum token. A typo in the constructor of the Owned contract (which is inherited by MORPH Token) allows attackers to acquire contract ownership. A new owner can subsequently obtain MORPH Tokens for free and can perform a DoS attack."
    }
]