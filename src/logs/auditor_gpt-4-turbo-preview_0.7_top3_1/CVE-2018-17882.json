[
    {
        "function_name": "batchTransfer",
        "code": "function batchTransfer(address[] _to, uint _value) public { balances[msg.sender] = safeSub( balances[msg.sender], _to.length * _value ); for (uint i = 0; i < _to.length; i++) { balances[_to[i]] = safeAdd(balances[_to[i]], _value); Transfer(msg.sender, _to[i], _value); } }",
        "vulnerability": "Batch Overflow",
        "reason": "This function allows for a batch transfer of tokens. However, it does not check if 'balances[msg.sender]' after subtraction goes negative nor does it validate the result of '_to.length * _value', which could lead to an overflow if the product is large enough. An attacker could exploit this to generate an enormous amount of tokens, thereby inflating the supply and potentially causing a denial of service by making the contract unusable or manipulating token value.",
        "file_name": "2018-17882.sol",
        "label": "Integer Overflow",
        "description": "An Integer overflow vulnerability exists in the batchTransfer function of a smart contract implementation for CryptoBotsBattle (CBTB), an Ethereum token. This vulnerability could be used by an attacker to create an arbitrary amount of tokens for any user."
    },
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { balances[_to] = safeAdd(balances[_to], _value); balances[_from] = safeSub(balances[_from], _value); if (_to != fights) { allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value); } Transfer(_from, _to, _value); return true; }",
        "vulnerability": "Missing Sender Authorization",
        "reason": "This function allows a 'msg.sender' to transfer tokens on behalf of '_from' without requiring any form of authorization check that 'msg.sender' has been approved by '_from'. This could enable anyone to freely transfer tokens from any account to another without permission, leading to possible theft of tokens.",
        "file_name": "2018-17882.sol",
        "label": "Integer Overflow",
        "description": "An Integer overflow vulnerability exists in the batchTransfer function of a smart contract implementation for CryptoBotsBattle (CBTB), an Ethereum token. This vulnerability could be used by an attacker to create an arbitrary amount of tokens for any user."
    },
    {
        "function_name": "create",
        "code": "function create(uint _amount) public onlyOwner { balances[msg.sender] = safeAdd(balances[msg.sender], _amount); totalSupply = safeAdd(totalSupply, _amount); }",
        "vulnerability": "Unrestricted Minting",
        "reason": "This function allows the contract owner to mint new tokens at will by directly adding to the 'balances[msg.sender]' and 'totalSupply'. This can lead to hyperinflation if the owner decides to mint an excessive number of tokens, devaluing the existing tokens held by other users. There is no cap on the total supply, making this particularly risky.",
        "file_name": "2018-17882.sol",
        "label": "Integer Overflow",
        "description": "An Integer overflow vulnerability exists in the batchTransfer function of a smart contract implementation for CryptoBotsBattle (CBTB), an Ethereum token. This vulnerability could be used by an attacker to create an arbitrary amount of tokens for any user."
    }
]