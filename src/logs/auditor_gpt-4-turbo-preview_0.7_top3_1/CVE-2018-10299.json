[
    {
        "function_name": "batchTransfer",
        "code": "function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) { uint cnt = _receivers.length; uint256 amount = uint256(cnt) * _value; require(cnt > 0 && cnt <= 20); require(_value > 0 && balances[msg.sender] >= amount); balances[msg.sender] = balances[msg.sender].sub(amount); for (uint i = 0; i < cnt; i++) { balances[_receivers[i]] = balances[_receivers[i]].add(_value); Transfer(msg.sender, _receivers[i], _value); } return true; }",
        "vulnerability": "Batch Overflow",
        "reason": "This function allows for a batch transfer of tokens, which seems like a beneficial feature at first glance. However, there's a critical issue with how the 'amount' variable is calculated - it's the product of the count of receivers (cnt) and the value (_value) to be transferred to each. If these values are large enough, the multiplication could overflow, leading to an incorrect (and significantly smaller) calculation of 'amount'. This overflow can enable an attacker to transfer an enormous amount of tokens while only having a few, bypassing the balance check and potentially leading to an unlimited minting scenario.",
        "file_name": "2018-10299.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the \"batchOverflow\" issue."
    },
    {
        "function_name": "transfer",
        "code": "function transfer(address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value > 0 && _value <= balances[msg.sender]); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); return true; }",
        "vulnerability": "Missing return value check for SafeMath",
        "reason": "Though this contract employs the SafeMath library to prevent overflows and underflows, the specific vulnerability here isn't directly related to SafeMath but rather the lack of checking the return value of the SafeMath operations. The functions in SafeMath (add, sub, mul, div) are designed to revert transactions when an arithmetic operation fails. However, since Solidity 0.4.16 doesn't automatically revert on failed calls but rather requires manual checks, this code assumes successful operations. The explicit vulnerability is hypothetical in the provided context, as SafeMath's assert statements implicitly handle error conditions, but it highlights a broader best practice of checking function outcomes, especially in versions of Solidity where checks-effects-interactions patterns are necessary.",
        "file_name": "2018-10299.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the \"batchOverflow\" issue."
    },
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value > 0 && _value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); Transfer(_from, _to, _value); return true; }",
        "vulnerability": "Missing check for zero address in approval",
        "reason": "While the function checks if '_to' is not the zero address to prevent burning of tokens, it does not explicitly check if '_from' is a non-zero address when transferring tokens on behalf of another account. This oversight doesn't directly lead to a vulnerability in the 'transferFrom' function itself but reflects a lack of thorough validation which could be exploited in other contexts or combined with other contract functionalities. A more comprehensive validation approach should also include checking that '_from' is not the zero address to prevent any potential misuse of the function.",
        "file_name": "2018-10299.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the \"batchOverflow\" issue."
    }
]