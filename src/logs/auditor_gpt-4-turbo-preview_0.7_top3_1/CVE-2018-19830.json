[
    {
        "function_name": "transfer",
        "code": "function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) unFrozenAccount onlyTransferable { if (frozenAccount[_to]) { InvalidAccount(_to, \"The receiver account is frozen\"); } else { balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); } }",
        "vulnerability": "Missing return statement",
        "reason": "The function does not return a boolean value indicating the success of the transfer, which is a common practice for ERC20 tokens. This can lead to interoperability issues with contracts expecting a boolean return value.",
        "file_name": "2018-19830.sol",
        "label": "Access Control",
        "description": "The UBSexToken() function of a smart contract implementation for Business Alliance Financial Circle (BAFC), an tradable Ethereum ERC20 token, allows attackers to change the owner of the contract, because the function is public (by default) and does not check the caller's identity."
    },
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint _value) unFrozenAccount { if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw; allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); }",
        "vulnerability": "ERC20 Approve/Allowance Race Condition",
        "reason": "This function does not correctly handle the race condition described in the ERC20 standard related to the approve function. An attacker can exploit this by first calling approve to set a non-zero allowance, wait for the owner to spend it, and then quickly call approve again before the owner notices to set a new allowance, potentially leading to double spending.",
        "file_name": "2018-19830.sol",
        "label": "Access Control",
        "description": "The UBSexToken() function of a smart contract implementation for Business Alliance Financial Circle (BAFC), an tradable Ethereum ERC20 token, allows attackers to change the owner of the contract, because the function is public (by default) and does not check the caller's identity."
    },
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) unFrozenAccount onlyTransferable{ var _allowance = allowed[_from][msg.sender]; require(!frozenAccount[_from]&&!frozenAccount[_to]); balances[_to] = balances[_to].add(_value); balances[_from] = balances[_from].sub(_value); allowed[_from][msg.sender] = _allowance.sub(_value); Transfer(_from, _to, _value); }",
        "vulnerability": "Missing Check for 0 Value Transfer",
        "reason": "This function does not explicitly check if the `_value` to be transferred is greater than 0. This can lead to unnecessary event logs and state changes, even when no actual tokens are transferred. It also might be used in some edge cases to perform a denial of service (DoS) attack by depleting the gas limit of a transaction.",
        "file_name": "2018-19830.sol",
        "label": "Access Control",
        "description": "The UBSexToken() function of a smart contract implementation for Business Alliance Financial Circle (BAFC), an tradable Ethereum ERC20 token, allows attackers to change the owner of the contract, because the function is public (by default) and does not check the caller's identity."
    }
]