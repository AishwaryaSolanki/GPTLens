[
    {
        "function_name": "distributeFUD",
        "code": "function distributeFUD(address[] addresses, uint256 _value, uint256 _ethbal) onlyOwner {\n for (uint i = 0; i < addresses.length; i++) {\n if (getEthBalance(addresses[i]) < _ethbal) { continue; }\n balances[owner] -= _value;\n balances[addresses[i]] += _value;\n Transfer(owner, addresses[i], _value);\n }\n}",
        "vulnerability": "Missing Check for 0x0 Address",
        "reason": "The function 'distributeFUD' does not check if the address in the iteration is the 0x0 address, which can lead to burning tokens if the 0x0 address is included in the distribution list. This can unintentionally reduce the total supply of tokens.",
        "file_name": "2018-11411.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for DimonCoin (FUD), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer all victims' balances into their account) because certain computations involving _value are incorrect."
    },
    {
        "function_name": "distributeFUD",
        "code": "function distributeFUD(address[] addresses, uint256 _value, uint256 _ethbal) onlyOwner {\n for (uint i = 0; i < addresses.length; i++) {\n if (getEthBalance(addresses[i]) < _ethbal) { continue; }\n balances[owner] -= _value;\n balances[addresses[i]] += _value;\n Transfer(owner, addresses[i], _value);\n }\n}",
        "vulnerability": "Unchecked Underflow",
        "reason": "The function 'distributeFUD' directly subtracts the _value from the owner's balance without checking if the owner has enough balance. This can lead to underflow where the balance of the owner becomes extremely high if the owner does not have enough tokens, allowing the owner to transfer an enormous amount of tokens they do not own.",
        "file_name": "2018-11411.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for DimonCoin (FUD), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer all victims' balances into their account) because certain computations involving _value are incorrect."
    },
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\n if (_value == 0) { return false; }\n uint256 fromBalance = balances[_from];\n uint256 allowance = allowed[_from][msg.sender];\n bool sufficientFunds = fromBalance <= _value;\n bool sufficientAllowance = allowance <= _value;\n bool overflowed = balances[_to] + _value > balances[_to];\n if (sufficientFunds && sufficientAllowance && !overflowed) {\n balances[_to] += _value;\n balances[_from] -= _value;\n allowed[_from][msg.sender] -= _value;\n Transfer(_from, _to, _value);\n return true;\n } else { return false; }\n}",
        "vulnerability": "Incorrect Logic for Checking Funds and Allowance",
        "reason": "The function 'transferFrom' uses incorrect logic to check if there are sufficient funds and allowance. The condition should be 'fromBalance >= _value' and 'allowance >= _value' instead of using '<='. This mistake means the function could potentially allow transfers that should not occur, as it incorrectly checks for the opposite condition, allowing transfers even when there are not enough funds or allowance.",
        "file_name": "2018-11411.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for DimonCoin (FUD), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer all victims' balances into their account) because certain computations involving _value are incorrect."
    }
]