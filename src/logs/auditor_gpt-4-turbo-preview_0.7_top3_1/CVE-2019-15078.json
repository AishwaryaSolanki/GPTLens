[
    {
        "function_name": "getTokens",
        "code": "function getTokens() payable canDistr onlyWhitelist public {\n\tif (value > totalRemaining) {\n\t\tvalue = totalRemaining;\n\t}\n\trequire(value <= totalRemaining);\n\taddress investor = msg.sender;\n\tuint256 toGive = value;\n\tdistr(investor, toGive);\n\tif (toGive > 0) {\n\t\tblacklist[investor] = true;\n\t}\n\tif (totalDistributed >= totalSupply) {\n\t\tdistributionFinished = true;\n\t}\n\tvalue = value.div(100000).mul(99999);\n}",
        "vulnerability": "Reentrancy",
        "reason": "The `getTokens` function does not properly manage the state before sending or distributing tokens. This could allow an attacker to call this function repeatedly before the state (such as `blacklist[investor] = true;` and the decrease of `value`) is updated, potentially allowing them to drain more tokens than intended.",
        "file_name": "2019-15078.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free."
    },
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _value) public returns (bool success) {\n\tif (_value != 0 && allowed[msg.sender][_spender] != 0) {\n\t\treturn false;\n\t}\n\tallowed[msg.sender][_spender] = _value;\n\temit Approval(msg.sender, _spender, _value);\n\treturn true;\n}",
        "vulnerability": "ERC20 Approve/Allowance Vulnerability",
        "reason": "The `approve` function does not set the allowance to zero before updating it, which can lead to a race condition known as the ERC20 Approve/Allowance Vulnerability. An attacker could exploit this by first getting the owner to approve a certain amount and then, before the owner sets a new allowance, spending the allowance, leading to the possibility of double spending.",
        "file_name": "2019-15078.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free."
    },
    {
        "function_name": "distr",
        "code": "function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n\ttotalDistributed = totalDistributed.add(_amount);\n\ttotalRemaining = totalRemaining.sub(_amount);\n\tbalances[_to] = balances[_to].add(_amount);\n\temit Distr(_to, _amount);\n\temit Transfer(address(0), _to, _amount);\n\treturn true;\n\tif (totalDistributed >= totalSupply) {\n\t\tdistributionFinished = true;\n\t}\n}",
        "vulnerability": "Unchecked Return Value",
        "reason": "The `distr` function does not check the return value of the `add` and `sub` functions from SafeMath, assuming they will always succeed. Although SafeMath functions revert on failure, this unchecked return value practice can lead to vulnerabilities in contracts that do not use SafeMath or when changes to the contract logic are made.",
        "file_name": "2019-15078.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free."
    }
]