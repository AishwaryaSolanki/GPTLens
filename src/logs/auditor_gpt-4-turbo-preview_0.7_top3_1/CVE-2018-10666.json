[
    {
        "function_name": "transfer",
        "code": "function transfer(address _to, uint256 _amount) returns (bool success) { require(!locked); require(balanceOf[msg.sender] >= _amount); require(balanceOf[_to] + _amount >= balanceOf[_to]); balanceOf[msg.sender] -= _amount; uint256 preBalance = balanceOf[_to]; balanceOf[_to] += _amount; bool alreadyMax = preBalance >= singleIDXMQty; if (!alreadyMax) { if (now >= validAfter[_to].ts + mustHoldFor) validAfter[_to].last = preBalance; validAfter[_to].ts = now; } if (validAfter[msg.sender].last > balanceOf[msg.sender]) validAfter[msg.sender].last = balanceOf[msg.sender]; Transfer(msg.sender, _to, _amount); return true; }",
        "vulnerability": "Integer overflow and underflow",
        "reason": "The contract does not properly use the SafeMath library for its arithmetic operations, especially in the 'transfer' function where tokens are transferred between parties. This oversight can lead to integer overflow or underflow, allowing attackers to manipulate balances.",
        "file_name": "2018-10666.sol",
        "label": "Access Control",
        "description": "The Owned smart contract implementation for Aurora IDEX Membership (IDXM), an Ethereum ERC20 token, allows attackers to acquire contract ownership because the setOwner function is declared as public. A new owner can subsequently modify variables."
    },
    {
        "function_name": "uploadBalances",
        "code": "function uploadBalances(address[] addresses, uint256[] balances) onlyOwner { require(!balancesLocked); require(addresses.length == balances.length); uint256 sum; for (uint256 i = 0; i < uint256(addresses.length); i++) { sum = safeAdd(sum, safeSub(balances[i], balanceOf[addresses[i]])); balanceOf[addresses[i]] = balances[i]; } balanceOf[owner] = safeSub(balanceOf[owner], sum); }",
        "vulnerability": "Arbitrary balance updates",
        "reason": "The 'uploadBalances' function allows the contract owner to arbitrarily update the balances of addresses. This can be misused by a malicious contract owner to inflate or deflate token balances without any actual token transfer, potentially leading to a significant security risk.",
        "file_name": "2018-10666.sol",
        "label": "Access Control",
        "description": "The Owned smart contract implementation for Aurora IDEX Membership (IDXM), an Ethereum ERC20 token, allows attackers to acquire contract ownership because the setOwner function is declared as public. A new owner can subsequently modify variables."
    },
    {
        "function_name": "setOwner",
        "code": "function setOwner(address _owner) returns (bool success) { owner = _owner; return true; }",
        "vulnerability": "Ownership takeover",
        "reason": "The 'setOwner' function allows changing the contract's owner without any checks or restrictions beyond being called by the current owner. If the current owner's private key is compromised, this can lead to a complete takeover of the contract by an attacker.",
        "file_name": "2018-10666.sol",
        "label": "Access Control",
        "description": "The Owned smart contract implementation for Aurora IDEX Membership (IDXM), an Ethereum ERC20 token, allows attackers to acquire contract ownership because the setOwner function is declared as public. A new owner can subsequently modify variables."
    }
]