[
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _value) public returns (bool success) { if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; } allowed[msg.sender][_spender] = _value; emit Approval(msg.sender, _spender, _value); return true; }",
        "vulnerability": "ERC20 Approve/Allowance Race Condition",
        "reason": "The approve function doesn't set the allowance to 0 before updating its value when the current allowance isn't 0. This could allow an attacker to be approved for a larger amount by making a call at a specific time.",
        "file_name": "2018-18425.sol",
        "label": "Token Devalue",
        "description": "The doAirdrop function of a smart contract implementation for Primeo (PEO), an Ethereum token, does not check the numerical relationship between the amount of the air drop and the token's total supply, which lets the owner of the contract issue an arbitrary amount of currency. (Increasing the total supply by using 'doAirdrop' ignores the hard cap written in the contract and devalues the token.)"
    },
    {
        "function_name": "transferOwnership",
        "code": "function transferOwnership(address newOwner) onlyOwner public { if (newOwner != address(0)) { owner = newOwner; } }",
        "vulnerability": "Missing Ownership Transfer Event",
        "reason": "There's no event emitted after transferring the ownership of the contract. This can lead to a lack of transparency, making it difficult for users to track changes in contract ownership.",
        "file_name": "2018-18425.sol",
        "label": "Token Devalue",
        "description": "The doAirdrop function of a smart contract implementation for Primeo (PEO), an Ethereum token, does not check the numerical relationship between the amount of the air drop and the token's total supply, which lets the owner of the contract issue an arbitrary amount of currency. (Increasing the total supply by using 'doAirdrop' ignores the hard cap written in the contract and devalues the token.)"
    },
    {
        "function_name": "withdraw",
        "code": "function withdraw() onlyOwner public { address myAddress = this; uint256 etherBalance = myAddress.balance; owner.transfer(etherBalance); }",
        "vulnerability": "DoS with Unexpected revert",
        "reason": "If the owner address is a contract that fails to receive Ether (e.g., due to a fallback function that reverts or consumes more than 2300 gas), the withdraw function will revert. This could lock funds indefinitely, especially since there's no alternative withdrawal pattern implemented.",
        "file_name": "2018-18425.sol",
        "label": "Token Devalue",
        "description": "The doAirdrop function of a smart contract implementation for Primeo (PEO), an Ethereum token, does not check the numerical relationship between the amount of the air drop and the token's total supply, which lets the owner of the contract issue an arbitrary amount of currency. (Increasing the total supply by using 'doAirdrop' ignores the hard cap written in the contract and devalues the token.)"
    }
]