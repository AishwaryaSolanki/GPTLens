[
    {
        "function_name": "approve",
        "vulnerability": "ERC20 Approve/Allowance Vulnerability",
        "criticism": "The reasoning provided for the 'approve' function vulnerability is accurate but lacks depth in explaining the implications. The ERC20 Approve/Allowance Vulnerability is a well-known issue that arises from not setting the allowance to zero before updating it. This can indeed lead to a race condition where an attacker could exploit the time window between approvals to spend more than the owner intended. However, the criticism does not address that the standard mitigation strategy is for users to set allowances to zero before updating them to a new value, which is a user practice rather than a contract vulnerability. The severity of this issue is moderate because it requires specific user actions to be exploitable, and the profitability could be high if exploited but is mitigated by user awareness and best practices.",
        "correctness": 7,
        "severity": 5,
        "profitability": 6,
        "reason": "The `approve` function does not set the allowance to zero before updating it, which can lead to a race condition known as the ERC20 Approve/Allowance Vulnerability. An attacker could exploit this by first getting the owner to approve a certain amount and then, before the owner sets a new allowance, spending the allowance, leading to the possibility of double spending.",
        "code": "function approve(address _spender, uint256 _value) public returns (bool success) {\n\tif (_value != 0 && allowed[msg.sender][_spender] != 0) {\n\t\treturn false;\n\t}\n\tallowed[msg.sender][_spender] = _value;\n\temit Approval(msg.sender, _spender, _value);\n\treturn true;\n}",
        "label": "Typo Constructor",
        "file_name": "2019-15078.sol",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free.",
        "final_score": 6.25
    },
    {
        "function_name": "getTokens",
        "vulnerability": "Reentrancy",
        "criticism": "The criticism of the 'getTokens' function for reentrancy vulnerability is somewhat misplaced. The function does indeed update the state before distributing tokens, which is a good practice to mitigate reentrancy attacks. However, the criticism fails to recognize that the actual vulnerability lies in the order of operations and not in the state update itself. The function updates the blacklist status and modifies 'value' after distributing tokens, which could potentially allow reentrancy if the 'distr' function calls an external contract. However, without knowing the implementation of 'distr', it's hard to accurately assess the risk. The severity is potentially high if 'distr' interacts with untrusted contracts, but the profitability is uncertain without more context on how 'getTokens' and 'distr' are used within the ecosystem.",
        "correctness": 5,
        "severity": 6,
        "profitability": 4,
        "reason": "The `getTokens` function does not properly manage the state before sending or distributing tokens. This could allow an attacker to call this function repeatedly before the state (such as `blacklist[investor] = true;` and the decrease of `value`) is updated, potentially allowing them to drain more tokens than intended.",
        "code": "function getTokens() payable canDistr onlyWhitelist public {\n\tif (value > totalRemaining) {\n\t\tvalue = totalRemaining;\n\t}\n\trequire(value <= totalRemaining);\n\taddress investor = msg.sender;\n\tuint256 toGive = value;\n\tdistr(investor, toGive);\n\tif (toGive > 0) {\n\t\tblacklist[investor] = true;\n\t}\n\tif (totalDistributed >= totalSupply) {\n\t\tdistributionFinished = true;\n\t}\n\tvalue = value.div(100000).mul(99999);\n}",
        "label": "Typo Constructor",
        "file_name": "2019-15078.sol",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free.",
        "final_score": 5.0
    },
    {
        "function_name": "distr",
        "vulnerability": "Unchecked Return Value",
        "criticism": "The criticism regarding the 'distr' function not checking the return value of 'add' and 'sub' functions from SafeMath is incorrect. SafeMath functions are designed to revert the transaction on failure (e.g., overflow or underflow), making explicit return value checks unnecessary. Therefore, the reasoning provided does not constitute a vulnerability in the context of using SafeMath. This criticism seems to misunderstand the purpose and functionality of SafeMath, which is specifically to prevent arithmetic errors without needing to check return values. The severity and profitability scores are not applicable here because the identified 'vulnerability' is based on a misunderstanding of SafeMath's guarantees.",
        "correctness": 1,
        "severity": 0,
        "profitability": 0,
        "reason": "The `distr` function does not check the return value of the `add` and `sub` functions from SafeMath, assuming they will always succeed. Although SafeMath functions revert on failure, this unchecked return value practice can lead to vulnerabilities in contracts that do not use SafeMath or when changes to the contract logic are made.",
        "code": "function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n\ttotalDistributed = totalDistributed.add(_amount);\n\ttotalRemaining = totalRemaining.sub(_amount);\n\tbalances[_to] = balances[_to].add(_amount);\n\temit Distr(_to, _amount);\n\temit Transfer(address(0), _to, _amount);\n\treturn true;\n\tif (totalDistributed >= totalSupply) {\n\t\tdistributionFinished = true;\n\t}\n}",
        "label": "Typo Constructor",
        "file_name": "2019-15078.sol",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free.",
        "final_score": 0.5
    }
]